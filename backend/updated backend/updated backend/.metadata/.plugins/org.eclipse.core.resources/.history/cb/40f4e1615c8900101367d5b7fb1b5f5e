package com.example.demo.service;

import java.time.LocalDateTime;
import java.util.Optional;
import java.util.Random;

import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.stereotype.Service;

import com.example.demo.model.OtpVerification;
import com.example.demo.repository.EmployeeRepository;
import com.example.demo.repository.OtpVerificationRepository;

import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class OtpService {

    private final OtpVerificationRepository otpRepo;
    private final EmployeeRepository employeeRepository;
    private final JavaMailSender mailSender;

    @Transactional
    public String generateOtp(String email) {
        // ✅ check if employee exists
        if (employeeRepository.findByEmail(email).isEmpty()) {
            throw new RuntimeException("Email not registered!");
        }

        // ✅ generate OTP (6 digits)
        String otp = String.format("%06d", new Random().nextInt(999999));
        LocalDateTime expiry = LocalDateTime.now().plusMinutes(5);

        // ✅ clear any old OTP
        otpRepo.deleteByEmail(email);

        // ✅ save new OTP
        OtpVerification otpEntity = new OtpVerification();
        otpEntity.setEmail(email);
        otpEntity.setOtp(otp);
        otpEntity.setExpiryTime(expiry);
        otpRepo.save(otpEntity);

        // ✅ send mail
        sendOtpEmail(email, otp);
        return otp;
    }

    private void sendOtpEmail(String toEmail, String otp) {
        SimpleMailMessage message = new SimpleMailMessage();
        message.setTo(toEmail);
        message.setSubject("Your OTP Code");
        message.setText("Your OTP code is: " + otp + "\nThis code is valid for 5 minutes.");
        mailSender.send(message);
    }

    public boolean validateOtp(String email, String enteredOtp) {
        Optional<OtpVerification> otpOpt = otpRepo.findByEmail(email);
        if (otpOpt.isEmpty()) return false;

        OtpVerification otpEntity = otpOpt.get();

        // ✅ check expiry
        if (otpEntity.getExpiryTime().isBefore(LocalDateTime.now())) {
            otpRepo.deleteByEmail(email);
            return false; // expired
        }

        // ✅ check match
        boolean isValid = otpEntity.getOtp().equals(enteredOtp);

        if (isValid) {
            otpRepo.deleteByEmail(email); // remove after success
        }

        return isValid;
    }
}
