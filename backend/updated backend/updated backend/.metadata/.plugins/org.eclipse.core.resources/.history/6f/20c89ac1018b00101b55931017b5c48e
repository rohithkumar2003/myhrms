package com.example.demo.controller;

import java.io.IOException;
import java.time.LocalDate;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.model.BankDetails;
import com.example.demo.model.Employee;
import com.example.demo.model.Experience;
import com.example.demo.model.JobDetails;
import com.example.demo.model.PersonalDetails;
import com.example.demo.model.User;
import com.example.demo.model.UserRole;
import com.example.demo.repository.EmployeeRepository;
import com.example.demo.service.EmailService;
import com.example.demo.service.EmployeeService;
import com.example.demo.service.NotificationService;

import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("/api/employees")
@RequiredArgsConstructor
public class EmployeeController {

    private final EmployeeService employeeService;
    private final EmployeeRepository employeeRepository;
    private final EmailService emailService;
    private final NotificationService notificationService;

    // ------------------- Add Employee -------------------
    @PostMapping
    public ResponseEntity<?> addEmployee(@RequestBody Employee employee) {
        try {
            // ------------------- Link nested objects -------------------
            if (employee.getPersonalDetails() != null)
                employee.getPersonalDetails().setEmployee(employee);

            if (employee.getBankDetails() != null)
                employee.getBankDetails().setEmployee(employee);

            if (employee.getExperienceDetails() != null)
                employee.getExperienceDetails().forEach(exp -> exp.setEmployee(employee));

            if (employee.getJobDetails() != null) {
                JobDetails job = employee.getJobDetails();
                job.setEmployee(employee);

                // ✅ Validate deptId
                if (job.getDeptId() == null || job.getDeptId().isEmpty()) {
                    return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                            .body(Map.of("error", "JobDetails deptId cannot be null or empty"));
                }

                // ✅ Validate date of joining
                if (job.getDoj() == null) {
                    return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                            .body(Map.of("error", "JobDetails date of joining cannot be null"));
                }
            } else {
                return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                        .body(Map.of("error", "JobDetails must be provided"));
            }

            // ------------------- Default User setup -------------------
            if (employee.getUser() != null && employee.getUser().getEmail() != null) {
                User user = employee.getUser();

                if (user.getPassword() == null || user.getPassword().isEmpty())
                    user.setPassword("default123");

                if (user.getRole() == null) user.setRole(UserRole.EMPLOYEE);
                if (user.getEnabled() == null) user.setEnabled(true);

                user.setEmployee(employee);
            }

            // ------------------- Save Employee -------------------
            Employee savedEmployee = employeeService.addEmployee(employee);

            // ------------------- Send Welcome Email -------------------
            emailService.sendWelcomeEmail(savedEmployee);

            return ResponseEntity.status(HttpStatus.CREATED).body(savedEmployee);

        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(Map.of("error", "Failed to create employee: " + e.getMessage()));
        }
    }

    // ------------------- Simple Employee Add via DTO -------------------
    @PostMapping("/simple")
    public ResponseEntity<?> addEmployeeSimple(@RequestBody Map<String, String> request) {
        try {
            Employee employee = new Employee();

            User user = new User();
            user.setEmail(request.get("email"));
            user.setPassword(request.getOrDefault("password", "default123"));
            user.setRole(UserRole.EMPLOYEE);
            user.setEnabled(true);

            employee.setUser(user);

            Employee savedEmployee = employeeService.addEmployee(employee);

            // Send welcome email
            emailService.sendWelcomeEmail(savedEmployee);

            return ResponseEntity.status(HttpStatus.CREATED).body(savedEmployee);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(Map.of("error", "Failed to create employee: " + e.getMessage()));
        }
    }

    // ------------------- Employee Login -------------------
    @PostMapping("/login")
    public ResponseEntity<?> loginEmployee(@RequestBody Map<String, String> loginRequest) {
        String email = loginRequest.get("email");
        String password = loginRequest.get("password");

        Optional<Employee> employeeOpt = employeeRepository.findByUserEmail(email);

        if (employeeOpt.isPresent()) {
            Employee employee = employeeOpt.get();
            if (employee.getUser() != null && password.equals(employee.getUser().getPassword())) {
                return ResponseEntity.ok(Map.of(
                        "message", "Login successful",
                        "employeeId", employee.getEmployeeId(),
                        "email", employee.getUser().getEmail(),
                        "role", employee.getUser().getRole().name()
                ));
            }
        }

        return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                .body(Map.of("error", "Invalid email or password"));
    }

    // ------------------- Other endpoints remain unchanged -------------------
    @PutMapping("/{employeeId}")
    public ResponseEntity<Employee> updateEmployee(
            @PathVariable String employeeId,
            @RequestBody Employee employeeDetails) {
        return ResponseEntity.ok(employeeService.updateEmployee(employeeId, employeeDetails));
    }

    @DeleteMapping("/{employeeId}")
    public ResponseEntity<Void> deleteEmployee(@PathVariable String employeeId) {
        employeeService.deleteEmployee(employeeId);
        return ResponseEntity.noContent().build();
    }

    // ------------------- Bank Details -------------------
    @GetMapping("/{employeeId}/bank-details")
    public ResponseEntity<List<BankDetails>> getAllBankDetails(@PathVariable String employeeId) {
        return ResponseEntity.ok(employeeService.getAllBankDetails(employeeId));
    }

    @PostMapping("/{employeeId}/bank-details")
    public ResponseEntity<BankDetails> createBankDetails(
            @PathVariable String employeeId,
            @RequestBody BankDetails bankDetails) {
        Employee employee = employeeService.getEmployeeById(employeeId);
        bankDetails.setEmployee(employee);
        return ResponseEntity.status(HttpStatus.CREATED).body(employeeService.saveBankDetails(bankDetails));
    }

    @PutMapping("/{employeeId}/bank-details")
    public ResponseEntity<BankDetails> updateBankDetails(
            @PathVariable String employeeId,
            @RequestBody BankDetails bankDetails) {
        BankDetails existing = employeeService.getBankDetails(employeeId);
        existing.setAccountNumber(bankDetails.getAccountNumber());
        existing.setBankName(bankDetails.getBankName());
        existing.setIfscCode(bankDetails.getIfscCode());
        existing.setBranch(bankDetails.getBranch());
        return ResponseEntity.ok(employeeService.saveBankDetails(existing));
    }

    @DeleteMapping("/{employeeId}/bank-details")
    public ResponseEntity<Void> deleteBankDetails(@PathVariable String employeeId) {
        employeeService.deleteBankDetails(employeeId);
        return ResponseEntity.noContent().build();
    }

    // ------------------- Personal Details -------------------
    @GetMapping("/{employeeId}/personal-details")
    public ResponseEntity<PersonalDetails> getPersonalDetails(@PathVariable String employeeId) {
        return ResponseEntity.ok(employeeService.getPersonalDetails(employeeId));
    }

    @PostMapping("/{employeeId}/personal-details")
    public ResponseEntity<PersonalDetails> createPersonalDetails(
            @PathVariable String employeeId,
            @RequestBody PersonalDetails personalDetails) {
        Employee employee = employeeService.getEmployeeById(employeeId);
        personalDetails.setEmployee(employee);
        return ResponseEntity.status(HttpStatus.CREATED).body(employeeService.savePersonalDetails(personalDetails));
    }

    @PutMapping("/{employeeId}/personal-details")
    public ResponseEntity<PersonalDetails> updatePersonalDetails(
            @PathVariable String employeeId,
            @RequestBody PersonalDetails personalDetails) {
        PersonalDetails existing = employeeService.getPersonalDetails(employeeId);
        existing.setDateofBirth(personalDetails.getDateofBirth());
        existing.setGender(personalDetails.getGender());
        existing.setFatherName(personalDetails.getFatherName());
        existing.setPanNumber(personalDetails.getPanNumber());
        existing.setAadhaarNumber(personalDetails.getAadhaarNumber());
        existing.setMaritalStatus(personalDetails.getMaritalStatus());
        existing.setNationality(personalDetails.getNationality());
        return ResponseEntity.ok(employeeService.savePersonalDetails(existing));
    }

    @DeleteMapping("/{employeeId}/personal-details")
    public ResponseEntity<Void> deletePersonalDetails(@PathVariable String employeeId) {
        employeeService.deletePersonalDetails(employeeId);
        return ResponseEntity.noContent().build();
    }
    
    @PostMapping("/{employeeId}")
    public ResponseEntity<PersonalDetails> saveOrUpdatePersonalDetails(
            @PathVariable String employeeId,
            @ModelAttribute PersonalDetailsDto detailsDto,
            @RequestParam(required = false) MultipartFile resume,
            @RequestParam(required = false) MultipartFile aadhar,
            @RequestParam(required = false) MultipartFile pan,
            @RequestParam(required = false) MultipartFile profilePhoto
    ) throws Exception {
        PersonalDetails savedDetails = personalDetailsService.saveOrUpdate(
            employeeId, detailsDto, resume, aadhar, pan, profilePhoto);
        return ResponseEntity.ok(savedDetails);
    }
    
    // ✅ Get file by employeeId and fileType
    @GetMapping("/{employeeId}/files/{fileType}")
    public ResponseEntity<byte[]> getFile(
            @PathVariable String employeeId,
            @PathVariable String fileType) {

        byte[] fileData = personalDetailsService.getFileByEmployeeIdAndType(employeeId, fileType);

        if (fileData == null || fileData.length == 0) {
            return ResponseEntity.notFound().build();
        }

        HttpHeaders headers = new HttpHeaders();
        // Set appropriate content type and disposition based on file type
        MediaType mediaType;
        String fileName;
        String contentDisposition;

        // Determine the media type and file name
        switch (fileType.toLowerCase()) {
            case "resume":
                mediaType = MediaType.APPLICATION_PDF; // Assuming resumes are PDFs
                fileName = "resume.pdf";
                contentDisposition = "attachment; filename=\"" + fileName + "\"";
                break;
            case "aadhar":
                mediaType = MediaType.IMAGE_JPEG; // Or MediaType.APPLICATION_PDF
                fileName = "aadhar.jpg";
                contentDisposition = "inline; filename=\"" + fileName + "\"";
                break;
            case "pan":
                mediaType = MediaType.IMAGE_JPEG; // Or MediaType.APPLICATION_PDF
                fileName = "pan.jpg";
                contentDisposition = "inline; filename=\"" + fileName + "\"";
                break;
            case "profilephoto":
                mediaType = MediaType.IMAGE_JPEG; // Assuming profile photos are JPEGs
                fileName = "profile_photo.jpg";
                contentDisposition = "inline; filename=\"" + fileName + "\"";
                break;
            default:
                return ResponseEntity.badRequest().build();
        }

        headers.setContentType(mediaType);
        headers.setContentLength(fileData.length);
        headers.set(HttpHeaders.CONTENT_DISPOSITION, contentDisposition);

        return new ResponseEntity<>(fileData, headers, HttpStatus.OK);
    }


    // ------------------- Experience -------------------
    @GetMapping("/{employeeId}/experience")
    public ResponseEntity<List<Experience>> getExperienceDetails(@PathVariable String employeeId) {
        return ResponseEntity.ok(employeeService.getExperienceDetails(employeeId));
    }

    @PostMapping("/{employeeId}/experience")
    public ResponseEntity<Experience> createExperience(
            @PathVariable String employeeId,
            @RequestBody Experience experience) {
        Employee employee = employeeService.getEmployeeById(employeeId);
        experience.setEmployee(employee);
        return ResponseEntity.status(HttpStatus.CREATED).body(employeeService.saveExperience(experience));
    }

    @DeleteMapping("/{employeeId}/experience")
    public ResponseEntity<Void> deleteAllExperience(@PathVariable String employeeId) {
        employeeService.deleteAllExperience(employeeId);
        return ResponseEntity.noContent().build();
    }

    @DeleteMapping("/{employeeId}/experience/{experienceId}")
    public ResponseEntity<Void> deleteExperienceById(
            @PathVariable String employeeId,
            @PathVariable Long experienceId) {
        employeeService.deleteExperienceById(experienceId);
        return ResponseEntity.noContent().build();
    }

    // ------------------- Job Details -------------------
    @GetMapping("/{employeeId}/job-details")
    public ResponseEntity<JobDetails> getJobDetails(@PathVariable String employeeId) {
        return ResponseEntity.ok(employeeService.getJobDetails(employeeId));
    }

    @PostMapping("/{employeeId}/job-details")
    public ResponseEntity<JobDetails> createJobDetails(
            @PathVariable String employeeId,
            @RequestBody JobDetails jobDetails) {
        Employee employee = employeeService.getEmployeeById(employeeId);
        jobDetails.setEmployee(employee);
        return ResponseEntity.status(HttpStatus.CREATED).body(employeeService.saveJobDetails(jobDetails));
    }

    @PutMapping("/{employeeId}/job-details")
    public ResponseEntity<JobDetails> updateJobDetails(
            @PathVariable String employeeId,
            @RequestBody JobDetails jobDetails) {
        JobDetails existing = employeeService.getJobDetails(employeeId);
        existing.setDeptId(jobDetails.getDeptId());
        existing.setDepartment(jobDetails.getDepartment());
        existing.setDesignation(jobDetails.getDesignation());
        existing.setDoj(jobDetails.getDoj());
        return ResponseEntity.ok(employeeService.saveJobDetails(existing));
    }

    @DeleteMapping("/{employeeId}/job-details")
    public ResponseEntity<Void> deleteJobDetails(@PathVariable String employeeId) {
        employeeService.deleteJobDetails(employeeId);
        return ResponseEntity.noContent().build();
    }

    // ------------------- Status -------------------
    @PatchMapping("/{employeeId}/deactivate")
    public ResponseEntity<Void> deactivateEmployee(@PathVariable String employeeId) {
        employeeService.deactivateEmployee(employeeId);
        return ResponseEntity.noContent().build();
    }

    @PatchMapping("/{employeeId}/reactivate")
    public ResponseEntity<Void> reactivateEmployee(
            @PathVariable String employeeId,
            @RequestParam String joiningDate) {
        employeeService.reactivateEmployee(employeeId, LocalDate.parse(joiningDate));
        return ResponseEntity.noContent().build();
    }

    // ------------------- Report -------------------
    @GetMapping("/report")
    public ResponseEntity<byte[]> generateEmployeeReport(
            @RequestParam(required = false) Boolean active,
            HttpServletResponse response) throws IOException {

        List<Employee> employees = active != null
                ? (active ? employeeService.getActiveEmployees() : employeeService.getInactiveEmployees())
                : employeeService.getAllEmployees();

        byte[] reportBytes = employeeService.generateEmployeeReport(employees);

        String filename = active != null
                ? (active ? "Active_Employees_Report.xlsx" : "Inactive_Employees_Report.xlsx")
                : "All_Employees_Report.xlsx";

        response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        response.setHeader("Content-Disposition", "attachment; filename=" + filename);

        return ResponseEntity.ok()
                .contentType(MediaType.APPLICATION_OCTET_STREAM)
                .body(reportBytes);
    }
}