package com.example.demo.controller;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.model.Attendance;
import com.example.demo.service.AttendanceService;

@RestController
@RequestMapping("/api/attendance")
@CrossOrigin(origins = "http://localhost:5173")
public class AttendanceController {
    
    @Autowired
    private AttendanceService attendanceService;
    
    @GetMapping("/punch-status/{employeeId}")
    public ResponseEntity<Map<String, Object>> getPunchStatus(
            @PathVariable String employeeId,
            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate date) {
        try {
            Map<String, Object> status;
            if (date != null) {
                status = attendanceService.getPunchStatus(employeeId, date);
            } else {
                status = attendanceService.getPunchStatus(employeeId); // Today
            }
            return ResponseEntity.ok(status);
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(Map.of("error", e.getMessage()));
        }
    }    
    @GetMapping("/punch-out-status/{employeeId}")
    public ResponseEntity<Map<String, Object>> getPunchOutStatus(@PathVariable String employeeId) {
        try {
            Map<String, Object> status = attendanceService.getPunchOutStatus(employeeId);
            return ResponseEntity.ok(status);
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(Map.of("error", e.getMessage()));
        }
    }
    
    @PostMapping("/punch-in/{employeeId}")
    public ResponseEntity<?> punchIn(@PathVariable String employeeId) {
        try {
            Attendance attendance = attendanceService.punchIn(employeeId);
            return ResponseEntity.ok(attendance);
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(Map.of("error", e.getMessage()));
        }
    }
    
    @PostMapping("/punch-out/{employeeId}")
    public ResponseEntity<?> punchOut(@PathVariable String employeeId) {
        try {
            Attendance attendance = attendanceService.punchOut(employeeId);
            return ResponseEntity.ok(attendance);
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(Map.of("error", e.getMessage()));
        }
    }
    
    @GetMapping("/today/{employeeId}")
    public ResponseEntity<Attendance> getTodayAttendance(@PathVariable String employeeId) {
        try {
            return attendanceService.getTodayAttendance(employeeId)
                    .map(ResponseEntity::ok)
                    .orElse(ResponseEntity.notFound().build());
        } catch (Exception e) {
            return ResponseEntity.badRequest().build();
        }
    }
    @PostMapping("/test/punch-in/{employeeId}")
    public ResponseEntity<?> testPunchIn(
            @PathVariable String employeeId,
            @RequestParam String punchInTime) {
        try {
            LocalDateTime customTime = LocalDateTime.parse(punchInTime);
            Attendance attendance = attendanceService.manualPunchIn(employeeId, customTime);
            return ResponseEntity.ok(attendance);
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(Map.of("error", e.getMessage()));
        }
    }

    @PostMapping("/test/punch-out/{employeeId}")
    public ResponseEntity<?> testPunchOut(
            @PathVariable String employeeId,
            @RequestParam String punchOutTime) {
        try {
            LocalDateTime customTime = LocalDateTime.parse(punchOutTime);
            Attendance attendance = attendanceService.manualPunchOut(employeeId, customTime);
            return ResponseEntity.ok(attendance);
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(Map.of("error", e.getMessage()));
        }
    }
    @GetMapping("/history/{employeeId}")
    public ResponseEntity<List<Attendance>> getAttendanceHistory(
            @PathVariable String employeeId,
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate startDate,
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate endDate) {
        try {
            List<Attendance> history = attendanceService.getAttendanceHistory(employeeId, startDate, endDate);
            return ResponseEntity.ok(history);
        } catch (Exception e) {
            return ResponseEntity.badRequest().build();
        }
    }
}